
========== NATURAL LANGUAGE QUERY ==========
Identify loans with upcoming covenant tests due (based on Frequency and LastTestDate) in the next 60 days, grouped by company.

========== INTENT & ENTITIES ==========
- Intent: Find loans whose next covenant test date is due within the next 60 days, and present the results grouped by company.

- Entities and fields:
  - Object: Loans
  - Object: Company
  - Field: Frequency (covenant test frequency)
  - Field: LastTestDate (date the last covenant test was performed)
  - Computed field: NextTestDate = LastTestDate + interval derived from Frequency
  - System date: Today (current_date)
  - Parameter: LookaheadWindow = 60 days

- Filters/conditions:
  - NextTestDate >= current_date
  - NextTestDate <= current_date + 60 days

- Grouping:
  - Group by Company (e.g., company_id/company_name)

- Notes/assumptions:
  - Frequency should map to an interval (e.g., Weekly=7 days, Monthly=1 month, Quarterly=3 months, Semiannual=6 months, Annual=12 months).

========== SQL GENERATION REASONING ==========
- Entities mapping: Loans and Companies via portfolio; Covenants provide Frequency and LastTestDate to compute NextTestDate.
- Tables/Joins: Start from dbo.Covenant c -> join dbo.vw_LoanPortfolio lp on LoanId to get CompanyName/CompanyId; optionally include LoanNumber if needed.
- Aggregations: Group by company (CompanyName/CompanyId). Provide counts: COUNT(DISTINCT c.CovenantId) as CovenantsDue and COUNT(DISTINCT lp.LoanId) as LoansAffected. Also MIN(NextTestDate) as EarliestDue.
- Filters: Compute NextTestDate = LastTestDate + interval from Frequency. Keep rows where NextTestDate >= today and <= today + 60 days. Exclude null LastTestDate.
- Order/Limit: Order by EarliestDue ascending, then CovenantsDue descending, then CompanyName. No limit unless requested.
- Assumptions: Frequency values map to intervals (Weekly=7 days; Monthly=1 month; Quarterly=3 months; Semiannual=6 months; Annual=12 months). Use GETDATE() for current date (cast to date). If Frequency outside known set, exclude or treat as monthly. Counting covenants due rather than per-loan tests.

========== GENERATED SQL (RAW) ==========
WITH cte_CovNext AS (
    SELECT
        c.LoanId,
        c.CovenantId,
        c.LastTestDate,
        c.Frequency,
        CASE UPPER(LTRIM(RTRIM(c.Frequency)))
            WHEN 'WEEKLY' THEN DATEADD(day, 7, c.LastTestDate)
            WHEN 'MONTHLY' THEN DATEADD(month, 1, c.LastTestDate)
            WHEN 'QUARTERLY' THEN DATEADD(month, 3, c.LastTestDate)
            WHEN 'SEMIANNUAL' THEN DATEADD(month, 6, c.LastTestDate)
            WHEN 'SEMI-ANNUAL' THEN DATEADD(month, 6, c.LastTestDate)
            WHEN 'SEMI ANNUAL' THEN DATEADD(month, 6, c.LastTestDate)
            WHEN 'ANNUAL' THEN DATEADD(year, 1, c.LastTestDate)
            ELSE NULL
        END AS NextTestDate
    FROM dbo.Covenant c
    WHERE c.LastTestDate IS NOT NULL
),
cte_LoanNext AS (
    SELECT
        LoanId,
        MIN(NextTestDate) AS NextCovenantTestDate
    FROM cte_CovNext
    WHERE NextTestDate IS NOT NULL
    GROUP BY LoanId
)
SELECT
    p.CompanyName,
    COUNT(DISTINCT p.LoanId) AS LoansDueWithin60Days,
    MIN(ln.NextCovenantTestDate) AS EarliestNextCovenantTestDate
FROM cte_LoanNext ln
JOIN dbo.vw_LoanPortfolio p
    ON p.LoanId = ln.LoanId
WHERE ln.NextCovenantTestDate >= CAST(GETDATE() AS date)
  AND ln.NextCovenantTestDate <= DATEADD(day, 60, CAST(GETDATE() AS date))
GROUP BY p.CompanyName
ORDER BY p.CompanyName;

========== SANITIZED SQL (FOR EXECUTION) ==========
SELECT
        c.LoanId,
        c.CovenantId,
        c.LastTestDate,
        c.Frequency,
        CASE UPPER(LTRIM(RTRIM(c.Frequency)))
            WHEN 'WEEKLY' THEN DATEADD(day, 7, c.LastTestDate)
            WHEN 'MONTHLY' THEN DATEADD(month, 1, c.LastTestDate)
            WHEN 'QUARTERLY' THEN DATEADD(month, 3, c.LastTestDate)
            WHEN 'SEMIANNUAL' THEN DATEADD(month, 6, c.LastTestDate)
            WHEN 'SEMI-ANNUAL' THEN DATEADD(month, 6, c.LastTestDate)
            WHEN 'SEMI ANNUAL' THEN DATEADD(month, 6, c.LastTestDate)
            WHEN 'ANNUAL' THEN DATEADD(year, 1, c.LastTestDate)
            ELSE NULL
        END AS NextTestDate
    FROM dbo.Covenant c
    WHERE c.LastTestDate IS NOT NULL
),
cte_LoanNext AS (
    SELECT
        LoanId,
        MIN(NextTestDate) AS NextCovenantTestDate
    FROM cte_CovNext
    WHERE NextTestDate IS NOT NULL
    GROUP BY LoanId
)
SELECT
    p.CompanyName,
    COUNT(DISTINCT p.LoanId) AS LoansDueWithin60Days,
    MIN(ln.NextCovenantTestDate) AS EarliestNextCovenantTestDate
FROM cte_LoanNext ln
JOIN dbo.vw_LoanPortfolio p
    ON p.LoanId = ln.LoanId
WHERE ln.NextCovenantTestDate >= CAST(GETDATE() AS date)
  AND ln.NextCovenantTestDate <= DATEADD(day, 60, CAST(GETDATE() AS date))
GROUP BY p.CompanyName
ORDER BY p.CompanyName;

========== SQL QUERY ERROR ==========
[ERROR] Failed to execute SQL query: ('42000', "[42000] [Microsoft][ODBC Driver 18 for SQL Server][SQL Server]Incorrect syntax near ')'. (102) (SQLExecDirectW)")

========== RUN DURATION ==========
Run duration: 153.88 seconds
